<html>
<head>
  <title>INFO 4310 - January 25</title>
  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  
  <style>
      .gridlines line {
        stroke: #bbb;
      }

      .gridlines .domain {
        stroke: none;
      }
      
      .state {
        fill: lightgrey;
      }
      .outline {
        stroke: black;
        stroke-width: 1px;
        fill: none;
      }
      .graticule {
        fill: none;
        stroke: #777;
      }
  </style>
  
</head>
<body>
  <div class="container larger">
    <h3>Notes for January 25</h3>
    <p>
      Today we will go through some d3 examples from INFO3300 as a quick review. This class is primarily intended for those who need a quick d3 refresher.
    </p>
    <p>
      Make sure to complete the introductory survey linked off of the main course schedule.
    </p>
    
    
    
    <h5>HTML for today:</h5>
      <svg id="scatterplot" height="400" width="600" style="margin-top:50px" >
        <text id="label" x="590" y="5"  text-anchor="end" alignment-baseline="hanging"></text>
        
        
      </svg>
      
      
      <svg id="choropleth" height="400" width="600" style="background: #445; margin-top:50px" >

      </svg>
      
      <svg id="graph" height="800" width="800" style="background: #sff; margin-top:50px" >
        
      </svg>
    
    
      <div id="barContainer">
        
      </div>
    
    <h5>Code for today:</h5>
    <pre>
      <code id="display1" class="hljs javascript">
      </code>
    </pre>
    <pre>
      <code id="display2" class="hljs javascript">
      </code>
    </pre>
    <pre>
      <code id="display3" class="hljs javascript">
      </code>
    </pre>
    
    
    
    
    
    <script id="notes1">
  
    // 0. Let's make a fancy scatterplot
    const scatter = d3.select("svg#scatterplot");
    
    const width = scatter.attr("width");
    const height = scatter.attr("height");
    const margin = {top: 10, right: 10, bottom: 50, left: 50};
    
    const chartWidth = width - margin.left - margin.right;
    const chartHeight = height - margin.top - margin.bottom;


    // We use <g> tags to make sure the points sit above the axis labels
    let annotations = scatter.append("g").attr("id","annotations");
                    // No translate here since our annotations may be outside of the chart area
                    
    let chartArea = scatter.append("g").attr("id","points")
                    .attr("transform","translate("+margin.left+","+margin.top+")");

    // Using an async function allows us to use "await" when handling promises
    // This is a lot more convenient than using .then() in my opinion
    const loadScatter = async function() {
      
      // Dataset we will be using
      let data = await d3.csv("../datasets/blockbusters.csv", d3.autoType )
      
      // Check for data issues
      data.forEach( d => {
        d['worldwide_gross'] = Number( d['worldwide_gross'].replace(/,/g, "").replace(/\$/g,"") );
      });

      // Building the scales we need
      const yearExtent = d3.extent(data, d => d['year']);
      const yearScale = d3.scaleLinear().domain(yearExtent).range([0, chartWidth]);
      
      const grossExtent = d3.extent(data, d => d['worldwide_gross']);
      const grossScale = d3.scaleLog().domain(grossExtent).range([chartHeight, 0]);
      
      const imdbExtent = d3.extent(data, d => d['imdb_rating']);
      const imdbScale = d3.scaleLinear().domain(imdbExtent).range([3,8]);

      const genreScale = d3.scaleOrdinal(d3.schemeCategory10);
      
      // 2. Draw some axes, make them fancy through using tickFormat
      //   Look at the documentation for d3.format to see all of the different options
      //       d3 tickformatting: https://github.com/d3/d3-format
      
      // Y axis
      let leftAxis = d3.axisLeft(grossScale)
                       .tickFormat(d3.format("$.0s"));  // shorter scientific notation with a dollar sign in front
      let leftGridlines = d3.axisLeft(grossScale)
                            .tickSize(-chartWidth-10)
                            .tickFormat("")
      
      annotations.append("g")
        .attr("class", "y axis")
        .attr("transform",`translate(${margin.left-10},${margin.top})`)
        .call(leftAxis)
      annotations.append("g")
        .attr("class", "y gridlines")
        .attr("transform",`translate(${margin.left-10},${margin.top})`)
        .call(leftGridlines);
      
      // X axis
      let bottomAxis = d3.axisBottom(yearScale)
                         .tickFormat(d3.format("~f"));  // exact value without commas
      let bottomGridlines = d3.axisBottom(yearScale)
                              .tickSize(-chartHeight-10)
                              .tickFormat("")
      annotations.append("g")
        .attr("class", "x axis")
        .attr("transform",`translate(${margin.left},${chartHeight+margin.top+10})`)
        .call(bottomAxis);
      annotations.append("g")
        .attr("class", "x gridlines")
        .attr("transform",`translate(${margin.left},${chartHeight+margin.top+10})`)
        .call(bottomGridlines);
        
      // DON'T FORGET:
      // If you're going to use d3.axis to make gridlines using the negative tickSize trick...
      // You need to use CSS styles to lighten up the gridlines and HIDE the .domain line
      // e.g. (assuming you give the <g> a gridlines class like the example does)
      
      // .gridlines line {
      //   stroke: #bbb;
      // }
      //
      // .gridlines .domain {
      //   stroke: none;
      // }
      
      // 3. Plot the circles
      // We will use a d3 data join -- see d3 docs if this is unfamiliar
      let circles = chartArea.selectAll("circle.point").data(data)
                              .join("circle")
                              .attr("class", "point")
                              .attr("label", d => d["title"])
                              .attr("genre", d => d["Main_Genre"])
                              .attr("opacity", 0.8)
                              .attr("cx", d => yearScale(d['year']))
                              .attr("cy", d => grossScale(d['worldwide_gross']+1))
                              .attr("r", d => imdbScale(d['imdb_rating']))
                              .attr("fill", d => genreScale(d['Main_Genre']) ); 
                
                
        // 5. Add some mouseovers
        //  Mouseover triggers when mouse enters object's region
        //  Mouseout triggers when mouse leaves the object's region
        //  WARNING: Avoid placing new elements on top of an object when using mouseover
        //           This can cause the two objects to fight, creating oscillating patterns
        circles.on("mouseover", function(event, d) {
          
          d3.select(this)
            .transition().duration(200)
            .attr("stroke","black")
            .attr("stroke-width", 4)
            .attr("fill", lighten( genreScale(d['Main_Genre']) )) ;
          
          d3.select("#label").text(d['title']);
          
        });
        // Make sure to clean up effects on mouseout
        circles.on("mouseout", function(event, d) {
          
          d3.select(this)
            .transition().duration(200)
            .attr("stroke","")
            .attr("stroke-width", 1)
            .attr("fill", genreScale(d['Main_Genre']) );
          
          d3.select("#label").text("");
        });
          
    }
    loadScatter();
    

    // HELPER FUNCTION
    //  lighten a color a little bit using d3 color functions
    function lighten(color) {
        
        let hclColor = d3.hcl(color);
        let luma = Math.min(130, hclColor.l + 30);
        return d3.rgb( d3.hcl( hclColor.h, hclColor.c, luma ) );
      
    }
    
    </script>
    
    <script id="notes2">
    
    const mapsvg = d3.select("#choropleth");
    const mapWidth = mapsvg.attr("width");
    const mapHeight = mapsvg.attr("height");
    const mapMargin = { top: 20, right: 20, bottom: 20, left:20};
    const mapAreaWidth = mapWidth - mapMargin.left - mapMargin.right;
    const mapAreaHeight = mapHeight - mapMargin.top - mapMargin.bottom;
    const map = mapsvg.append("g")
                    .attr("transform","translate("+mapMargin.left+","+mapMargin.top+")");
    
    // Async function to build the map
    const requestMap = async function() {
    
      // 1. Draw a map of US using topoJSON
      const us = await d3.json("../datasets/us-smaller.json");
      console.log(us);
    
      // 2a. Pick out topographic features and build d3 helpers
      var states = topojson.feature(us, us.objects.states);     // List of state outlines to fill
      var statesMesh = topojson.mesh(us, us.objects.states);    // 'Mesh' of all outlines put together for a stroke
      var projection = d3.geoAlbersUsa().fitSize([mapAreaWidth, mapAreaHeight], states);
      var path = d3.geoPath().projection(projection);
      console.log(states);
      console.log(statesMesh);
      
      // 2b. Add a graticule
      var graticule = d3.geoGraticule10();
      map.append("path").attr("class","graticule").attr("d", path(graticule) )
      
      
      // 2c. Draw states  (see CSS at the top)
      map.selectAll("path.state").data(states.features)
         .join("path")
         .attr("class", "state")
         .attr("note", d => d.id)  // debugging
         .attr("d", path);
         
      // ... and outlines  (see CSS at the top)
      map.append("path").datum(statesMesh)
         .attr("class","outline")
         .attr("d", path);
      
    
      // 3a. Import survey data as synchronous calls
      // "../datasets/state-survey-responses-fa21.csv"
      var surveyData = await d3.csv("../datasets/state-survey-responses-fa21.csv", d3.autotype);
      console.log(surveyData)
    
      // 3b. Generate the dictionary we will need
      let stateIdCounts = {}; // stateIdCounts[ stateId ] -> count
      let stateIdNames = {}; // stateIdNames[ stateId ] -> name
      
      surveyData.forEach( row => {
        stateIdCounts[ row.state_code ] = Number(row.total);
        stateIdNames[ row.state_code ] = row.state_name;
      });
      console.log(stateIdCounts)
    
      // 3c. Make a d3 color scale for frequency    
      // Notice that stateIdCounts is a dictionary and not an array, which is usually what we send to d3.extent
      // We're only interested in the values in that dictionary, so we can use a static helper function in Object to help
      const minMax = d3.extent( Object.values(stateIdCounts) );
      console.log(minMax);
      
      // In the original lecture, we tried a bunch of different kinds of scales
      //  scaleSequential looks pretty, but because most of the points are well below max, most
      //   of the colors remain unused and it's hard to see differences
      //  scaleQuantize works a bit better by binning but bins most of them in the bottom box
      //   (say that 10 times fast)
      //  scaleQuantile  quantiLe  works best because it factors in distribution
      
      const colorScale = d3.scaleQuantile()
                           .domain(Object.values(stateIdCounts))
                           .range(["#fff","#d1e8ed","#adc2da","#8879b3","#762b80"]);
    
      // 3d. Recolor the states to make a choropleth map
      map.selectAll(".state")
         .style("fill", d => colorScale( stateIdCounts[d.id]) );
    
    
    };
    requestMap();
      
    
    </script>
    
    <script id="notes3">
    
    // Layer for drawing
    const layer = d3.select("#graph").append("g");
    const graphwidth = d3.select("#graph").attr("width");
    const graphheight = d3.select("#graph").attr("height");

    
    const requestGraph = async () => {

      // Load dataset of Karate club study 
      const karate = await d3.json("../datasets/soc-karate-dense.json");
      
      console.log(karate);

      // Get the nodes
      var nodes = karate.nodes; // Nodes can be just plain objects
                                // Loop through nodes to build edges
      
      // What about links? 
      // See karate.edges... but d3 expects a *sparse edge list* while we have a *dense matrix*
      
      // This dataset has a *dense* edge matrix rather than a *sparse* edge list
      // Dense matrices are 2d arrays -- each place in the matrix corresponds to an index in *nodes*
      //  If there is a 1 there, then there is an edge -- e.g. if edge: matrix[source][target] = 1
      //  Since the data are non-directed, the matrix is symmetrical across diagonal
      // Sparse edge lists are 1d arrays containing only the edges that are present
      //  They are more efficient structures for the kinds of things we need to do (but aren't always)
      //  To make one, we need to find all of the "1" values in the dense matrix (remembering it's symmetrical)
      var links = [];
      
      // Loop through one half of the matrix (because it's symmetrical)
      let edgeMatrix = karate.edges;
      for (let i=0; i<nodes.length; i++) {
        for (let j=i; j<nodes.length; j++) {   // j=i lets us loop over the upper right triangle only
          
          // If an edge is present, use the index to look up that node's ID number
          // Then make a sparse edge object and put it into our list of links
          if (edgeMatrix[i][j] === 1) {
            sourceID = nodes[i]['id'];
            targetID = nodes[j]['id'];
            link = { 'source': sourceID, 'target': targetID };
            links.push(link);
          }
          
        }
      }
      
      console.log(" Nodes and links");
      console.log(nodes);
      console.log(links);

      // Build a simulation for the graph
      var sim = d3.forceSimulation()
                  .nodes(nodes)
                  .force("links", d3.forceLink()   // Keep nodes that are connected near each other
                                          .links(links)           // give the force an array of source/target objects
                                          .id( d => d['id'] ) )
                                                 // if source and target don't provide array indices for nodes, .id will tell the force what to look for in the nodes when it is trying to connect things together. Provide a getter function for _node elements_
                  .force("repulse", d3.forceManyBody().strength(-150) ) // electrostatic repulsion between all nodes to space them out
                  .force("center", d3.forceCenter(width/2.0, height/2.0)) // centering force to make sure points don't fly away completely
                  .on("tick", render);


      // *********          
      // Notice how after building the d3.forceLink, the source/target values in links have been 
      //  *changed into pointers* to elements in nodes. This will allow us to draw the edges easily!
      // *********

      // Update the chart for a new tick of the simulation
      function render() {

        // Edges
        let lines = layer.selectAll("line.link").data(links)
             .join(
               enter => enter.append("line")
                             .attr("class","link")
                             .attr("stroke","#333") 
             )
             .attr("x1", d => d.source.x).attr("x2", d => d.target.x)   // Using the pointers d3.forceLink provides to access node x and y coords
             .attr("y1", d => d.source.y).attr("y2", d => d.target.y);

        // Nodes
        let circles = layer.selectAll("circle.node").data(nodes)
               .join(
                  enter => enter.append("circle")
                                .attr("class","node")
                                .attr("stroke", "#333")
                                .attr("r", 8)
                                .attr("cx", 0)
                                .attr("cy", 0)
                                .attr("fill", d => {
                                  if (d.id === 1) { return "#0C0"; }
                                  else if (d.id === 34) { return "#C00"; }
                                  else { return "steelblue" }
                                })
                                // NOTE: Drag events work slightly different in v6 / v7 -- always check docs
                                //  and verify which version any reference examples are using
                                .call( d3.drag().on("start",dragstart)
                                                .on("drag",dragging)
                                                .on("end",dragend) )
                )
               .attr("transform", d => `translate(${d.x},${d.y})`);

      }

      render();  // Call render once to make sure we draw circles even if simulation stops



      // Handle drag events and add a nice text label
      var label = layer.append("text").attr("id","label");

      function dragstart(event, d) {
        // Begin dragging a circle, make sure the simulation reserves enough alpha to react
        // We use event.active here to make sure we handle multitouch
        // This is also a boolean that can help to differentiate when you are using both a pan and a drag
        if (!event.active) {
          // alphaTarget here is the "minimum" alpha allowed in the model
          // If it is greater than 0, then points are always allowed to move a bit
          // During the drag we want it to be >0 so that the model can shift around
          // Too low and it feels mushy. Too high and it feels jumpy or falls apart
          label.text(d.id);
          sim.alphaTarget(0.08).restart();
        }

        // We initially tried d.x=event.x; The problem here was that the model is changing d.x in real time.
        // In the best case, it just means the drag and model fight, leading to points that vibrate
        // In the worst case, you run into a race condition or other concurrency issue

        // Putting values into d.fy and d.fx signal to d3 that you are FIXING the point in a location -- usually used for drags
        // This disallows the simulation from changing x and y of this point
        d.fx = event.x;
        d.fy = event.y;

        label.attr("x",event.x + 5).attr("y",event.y);

      }
      function dragging(event, d) {
        // Continue dragging
        d.fx = event.x;
        d.fy = event.y;
        label.attr("x",event.x + 5).attr("y",event.y);

      }
      function dragend(event, d) {
        // End dragging a circle, make sure the simulation has enough alpha left to fix things afterwards
        if (!event.active) {
          sim.alphaTarget(0); // Allow the simulation to cool completely again
          label.text("");
        }

        // Remember to null out your .fx and .fy so that d3 can begin simulating the dragged point once more
        d.fx = null;
        d.fy = null;


      }
    }
    requestGraph();
    
    </script>
    
    
    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>
    
    function sanitize(s) {
      return s.replace("<br>", "\\n")
              .replace(/&/g, "&amp;")
              .replace(/</g, "&lt;")
              .replace(/>/g, "&gt;")
              .replace(/"/g, "&quot;")
              .replace(/'/g, "&#039;");
            }
      document.getElementById("display1").innerHTML = sanitize( document.getElementById("notes1").innerText);
      document.getElementById("display2").innerHTML = sanitize( document.getElementById("notes2").innerText);
      document.getElementById("display3").innerHTML = sanitize( document.getElementById("notes3").innerText);
      hljs.highlightAll();
    </script>    
    
  </div>
</body>
</html>
