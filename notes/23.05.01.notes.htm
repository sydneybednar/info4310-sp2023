<html>
<head>
  <title>INFO 4310 - May-1</title>
  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/tone@14.7.58/build/Tone.min.js"></script>
  <style>
    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }
  </style>
  
</head>
<body>
  <div class="container larger">
    <h3>Notes for May 1</h3>
    <p>
      This lecture concerns <a href="https://www.nasa.gov/mission_pages/chandra/news/data-sonification-sounds-from-around-the-milky-way.html">sonification</a> of data. This practice has been advertised as one way to make data more accessible by converting visual channels into auditory ones. However, as discussed in INFO3300, audio has its own unique limitations that make sonified data a lot harder to process. We'll look into how to work with sound on the web in order to make a sonified visualization, identifying issues along the way.
    </p>
    <p>
      Nowadays there is an audio API built into browsers. We'll use <a href="https://tonejs.github.io/">tone.js</a> as an easy front-end for this interface.
    </p>
    <h5>HTML for today:</h5>
    <svg id="lineplot" width="500" height="500" style="margin-bottom:20px" >
    </svg>
    <p><button id="lineplay">Play</button></p>
    
    <svg id="barplot" width="500" height="500" style="margin-bottom:20px" >
    </svg>
    <p><button id="barplay">Play</button></p>
    
    
    <h5>Code for today:</h5>
    <pre>
      <code id="display1" class="hljs javascript">
      </code>
    </pre>
    <pre>
      <code id="display2" class="hljs javascript">
      </code>
    </pre>
    
    <script id="notes1">
    
    
    // Later on we noted how weird the piano samples sounded when we used plain frequencies
    // This was because the listener might expect the piano to conform to the actual keys it has and not be out of tune 
    // In an ideal world you'd pick a specific scale for this so it sounds better for the user
    var noteFrequencies = [16.35, 17.32, 18.35, 19.45, 20.6, 21.83, 23.12, 24.5, 25.96, 27.5, 29.14, 30.87, 32.7, 34.65, 36.71, 38.89, 41.2, 43.65, 46.25, 49, 51.91, 55, 58.27, 61.74, 65.41, 69.3, 73.42, 77.78, 82.41, 87.31, 92.5, 98, 103.83, 110, 116.54, 123.47, 130.81, 138.59, 146.83, 155.56, 164.81, 174.61, 185, 196, 207.65, 220, 233.08, 246.94, 261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392, 415.3, 440, 466.16, 493.88, 523.25, 554.37, 587.33, 622.25, 659.25, 698.46, 739.99, 783.99, 830.61, 880, 932.33, 987.77, 1046.5, 1108.73, 1174.66, 1244.51, 1318.51, 1396.91, 1479.98, 1567.98, 1661.22, 1760, 1864.66, 1975.53, 2093, 2217.46, 2349.32, 2489.02, 2637.02, 2793.83, 2959.96, 3135.96, 3322.44, 3520, 3729.31, 3951.07, 4186.01, 4434.92, 4698.63, 4978.03, 5274.04, 5587.65, 5919.91, 6271.93, 6644.88, 7040, 7458.62, 7902.13];
    // Simple check for nearest value in noteFrequencies  (yes, binary search may be 'faster')
    function closestFrequency( freq ) {
        k = noteFrequencies[0];
        for (let i=1; i<noteFrequencies.length; i++) {
          if ( Math.abs(freq - noteFrequencies[i]) < Math.abs(freq - k) ) {
            k = noteFrequencies[i];
          }
        }
        return k;
    }
    
    
    const updateLinechart = async () => {
      
      let data = await d3.csv("../datasets/co2.csv", d3.autoType);
      const timeParser = d3.timeParse('%Y-%m-%d');
      data.forEach( (d, i) => {
        d.id = i;
        d.date = timeParser(d["String Date"]);
      });

      const svg = d3.select("svg#lineplot");
      const width = svg.attr("width");
      const height = svg.attr("height");
      const margin = {top: 10, right: 10, bottom: 50, left: 50};
      const chartWidth = width - margin.left - margin.right;
      const chartHeight = height - margin.top - margin.bottom;

      let annotations = svg.append("g").attr("id","annotations");
      let chartArea = svg.append("g").attr("id","points")
                      .attr("transform","translate("+margin.left+","+margin.top+")");

      const carbonExtent = d3.extent(data, d => d['Carbon Dioxide (ppm)']);
      const carbonScale = d3.scaleLinear().domain(carbonExtent).range([chartHeight, 0]);
      const dateExtent = d3.extent(data, d => d['date']);
      const dateScale = d3.scaleTime().domain(dateExtent).range([0,chartWidth]);

      let leftAxis = d3.axisLeft(carbonScale)
      let leftGridlines = d3.axisLeft(carbonScale)
                            .tickSize(-chartWidth-10)
                            .tickFormat("")
      let bottomAxis = d3.axisBottom(dateScale)
      let bottomGridlines = d3.axisBottom(dateScale)
                              .tickSize(-chartHeight-10)
                              .tickFormat("")
      annotations.append("g")
        .attr("class", "y axis")
        .attr("transform","translate("+(margin.left-10)+","+margin.top+")")
        .call(leftAxis)
      annotations.append("g")
        .attr("class", "y gridlines")
        .attr("transform","translate("+(margin.left-10)+","+margin.top+")")
        .call(leftGridlines);
      annotations.append("g")
        .attr("class", "x axis")
        .attr("transform","translate("+margin.left+","+(chartHeight+margin.top+10)+")")
        .call(bottomAxis);
      annotations.append("g")
        .attr("class", "x gridlines")
        .attr("transform","translate("+margin.left+","+(chartHeight+margin.top+10)+")")
        .call(bottomGridlines);

      var lineGen = d3.line()
                      .x( d => dateScale(d['date']) )
                      .y( d => carbonScale(d['Carbon Dioxide (ppm)']) )
                      .curve(d3.curveMonotoneX);

      chartArea.append("path")
               .datum(data)
               .attr("class", "line")
               .attr("fill", "none")
               .attr("stroke", "steelblue")
               .attr("stroke-width", 3)
               .attr("d", lineGen);

      let circles = chartArea.selectAll("circle").data(data, d => d.id)
                             .join("circle")
                             .attr("class", d => d.id)  // use this later to highlight circles during animation
                             .attr("r", 3)
                             .attr("fill", "navy")
                             .attr("cx", d => dateScale(d['date']) )
                             .attr("cy", d => carbonScale(d['Carbon Dioxide (ppm)']) );


      // Set up tone.js for sound
      
      
      
      
      
      
      
    }
    
    updateLinechart();
    
    
    </script>
    
    
    <script id="notes2">
    
    
    const updateBarchart = async () => {
      
      // We'll use the Palmer Penguins dataset to make a histogram
      // https://allisonhorst.github.io/palmerpenguins/
      
      const penguinData = await d3.csv("../datasets/penguins.csv", d3.autoType);
      console.log(penguinData)
      
      const penguinBySpecies = d3.group(penguinData, d => d.species ); // d3.nest for v6
      
      
      const svg = d3.select("svg#barplot");
      const width = svg.attr("width");
      const height = svg.attr("height");
      const margin = {top: 10, right: 10, bottom: 50, left: 50};
      const chartWidth = width - margin.left - margin.right;
      const chartHeight = height - margin.top - margin.bottom;

      let annotations = svg.append("g").attr("id","annotations");
      let chartArea = svg.append("g").attr("id","points")
                      .attr("transform","translate("+margin.left+","+margin.top+")");

      const xAttr = 'flipper_length_mm';

      const countScale = d3.scaleLinear().range([chartHeight, 0]);
      //const xExtent = d3.extent(penguinData, d => d[xAttr]);
      const xExtent = [170, 235]; // hard-coding this to make a more appealing chart
      const xScale = d3.scaleLinear().domain(xExtent).range([0,chartWidth]);

      let bin = d3.bin().domain(xScale.domain()).value( d => d[xAttr] ).thresholds(xScale.ticks());
      let combinedBins = bin(penguinData);
      let adelieBins = bin(penguinBySpecies.get('Adelie'));
      adelieBins.forEach( (d, i) => d.id = i );
      console.log(adelieBins);
      let gentooBins = bin(penguinBySpecies.get('Gentoo'));
      gentooBins.forEach( (d, i) => d.id = i );
      console.log(gentooBins);
      let chinstrapBins = bin(penguinBySpecies.get('Chinstrap'));
      chinstrapBins.forEach( (d, i) => d.id = i );
      console.log(chinstrapBins);
      
      const countMax = Math.max( d3.max(adelieBins, d => d.length), d3.max(gentooBins, d => d.length), d3.max(chinstrapBins, d => d.length) );
      countScale.domain([0, countMax]);

      let leftAxis = d3.axisLeft(countScale)
      let leftGridlines = d3.axisLeft(countScale)
                              .tickSize(-chartWidth-10)
                              .tickFormat("")
      let bottomAxis = d3.axisBottom(xScale)
      let bottomGridlines = d3.axisBottom(xScale)
                                .tickSize(-chartHeight-10)
                                .tickFormat("")
      annotations.append("g")
        .attr("class", "y axis")
        .attr("transform","translate("+(margin.left-10)+","+margin.top+")")
        .call(leftAxis)
      annotations.append("g")
        .attr("class", "y gridlines")
        .attr("transform","translate("+(margin.left-10)+","+margin.top+")")
        .call(leftGridlines);
      annotations.append("g")
        .attr("class", "x axis")
        .attr("transform","translate("+margin.left+","+(chartHeight+margin.top+10)+")")
        .call(bottomAxis);
      annotations.append("g")
        .attr("class", "x gridlines")
        .attr("transform","translate("+margin.left+","+(chartHeight+margin.top+10)+")")
        .call(bottomGridlines);
      
      
      let adelieBars = chartArea.selectAll("rect.adelie").data(adelieBins, d => d.id)
                         .join("rect").attr("class","adelie")
                         .attr("fill", "#1f77b4")
                         .attr("stroke","black")
                         .attr("opacity", 0.8)
                         .attr("x", d => xScale(d.x0)+1)
                         .attr("width", d => Math.max(0, xScale(d.x1) - xScale(d.x0) - 1))
                         .attr("y", d => countScale(d.length))
                         .attr("height", d => countScale(0) - countScale(d.length))
                         
      let gentooBars = chartArea.selectAll("rect.gentoo").data(gentooBins, d => d.id)
                          .join("rect").attr("class","gentoo")
                          .attr("fill", "#d62728")
                          .attr("stroke","black")
                          .attr("opacity", 0.8)
                          .attr("x", d => xScale(d.x0)+1)
                          .attr("width", d => Math.max(0, xScale(d.x1) - xScale(d.x0) - 1))
                          .attr("y", d => countScale(d.length))
                          .attr("height", d => countScale(0) - countScale(d.length))
                        
      let chinstrapBars = chartArea.selectAll("rect.chinstrap").data(chinstrapBins, d => d.id)
                         .join("rect").attr("class","chinstrap")
                         .attr("fill", "#7f7f7f")
                         .attr("stroke","black")
                         .attr("opacity", 0.8)
                         .attr("x", d => xScale(d.x0)+1)
                         .attr("width", d => Math.max(0, xScale(d.x1) - xScale(d.x0) - 1))
                         .attr("y", d => countScale(d.length))
                         .attr("height", d => countScale(0) - countScale(d.length))
    
      
      // Add some audio!
      // Volume for the y axis, frequency (and time) for the x axis, instrument for color
      const volumeScale = countScale.copy().range([-24,-12]);
      const freqScale = d3.scalePow().exponent(2).domain([0, chinstrapBins.length]).range([130.81, 523.25])
      
      let highlightDuration = 500; // milliseconds
      let button = d3.select("button#barplay");
      let playing = false;
      button.on("click", async function() {
        
        // To disable the button until the sounds load, I use var LOADED from the last script tag
        if (!LOADED) { console.log("not loaded"); return; }
        
        if (playing) {
          svg.selectAll("rect").interrupt();
          svg.selectAll("rect").transition()
                 .duration( 400 )
                 .attr("stroke","black");
          playing = false;
          button.text("Play");
          return;
        }
    
        playing = true;
        button.text("Stop");
        
        
        // Make the bars play music?
        
        
        
        
        
        
        
        
        svg.selectAll("rect").transition()
               .duration( 400 )
               .attr("stroke","black");
        playing = false;
        button.text("Play");
               
       });
      
    }
    
    updateBarchart();
    
    </script>
    
    
    
    <script>
    // Making use of the library and samples gathered by NPB at https://github.com/nbrosowsky/tonejs-instruments
    //  The sound files in datasets/samples come from VSCO2 https://vis.versilstudios.com/vsco-community.html
    
    /**
    * @author N.P. Brosowsky (nbrosowsky@gmail.com)
    * https://github.com/nbrosowsky/tonejs-instruments
    * MIT licensed
    */

    var SampleLibrary = {
        minify: false,
        ext: '.[mp3|ogg]', // use setExt to change the extensions on all files // do not change this variable //
        baseUrl: '../datasets/audio_samples/',
        list: ['harp','organ','piano'],
        onload: null,
      
        load: function (arg) {
            var t, rt, i;
            (arg) ? t = arg: t = {};
            t.instruments = t.instruments || this.list;
            t.baseUrl = t.baseUrl || this.baseUrl;
            t.onload = t.onload || this.onload;

            // update extensions if arg given
            if (t.ext) {
                if (t.ext != this.ext) {
                    this.setExt(t.ext)
                }
                t.ext = this.ext
            }

            rt = {};

            // if an array of instruments is passed...
            if (Array.isArray(t.instruments)) {
                for (i = 0; i <= t.instruments.length - 1; i++) {
                    var newT = this[t.instruments[i]];
                    //Minimize the number of samples to load
                    if (this.minify === true || t.minify === true) {
                        var minBy = 1;
                        if (Object.keys(newT).length >= 17) {
                            minBy = 2
                        }
                        if (Object.keys(newT).length >= 33) {
                            minBy = 4
                        }
                        if (Object.keys(newT).length >= 49) {
                            minBy = 6
                        }

                        var filtered = Object.keys(newT).filter(function (_, i) {
                            return i % minBy != 0;
                        })
                        filtered.forEach(function (f) {
                            delete newT[f]
                        })

                    }




                    rt[t.instruments[i]] = new Tone.Sampler(
                        newT, {
                            baseUrl: t.baseUrl + t.instruments[i] + "/",
                            onload: t.onload
                        }

                    )
                }

                return rt

                // if a single instrument name is passed...
            } else {
                newT = this[t.instruments];

                //Minimize the number of samples to load
                if (this.minify === true || t.minify === true) {
                    minBy = 1;
                    if (Object.keys(newT).length >= 17) {
                        minBy = 2
                    }
                    if (Object.keys(newT).length >= 33) {
                        minBy = 4
                    }
                    if (Object.keys(newT).length >= 49) {
                        minBy = 6
                    }

                    filtered = Object.keys(newT).filter(function (_, i) {
                        return i % minBy != 0;
                    })
                    filtered.forEach(function (f) {
                        delete newT[f]
                    })
                }




                var s = new Tone.Sampler(
                    newT, {
                        baseUrl: t.baseUrl + t.instruments + "/",
                        onload: t.onload
                    }
                )

                return s
            }

        },
        'harp': {
            'C5': 'C5.[mp3|ogg]',
            'D2': 'D2.[mp3|ogg]',
            'D4': 'D4.[mp3|ogg]',
            'D6': 'D6.[mp3|ogg]',
            'D7': 'D7.[mp3|ogg]',
            'E1': 'E1.[mp3|ogg]',
            'E3': 'E3.[mp3|ogg]',
            'E5': 'E5.[mp3|ogg]',
            'F2': 'F2.[mp3|ogg]',
            'F4': 'F4.[mp3|ogg]',
            'F6': 'F6.[mp3|ogg]',
            'F7': 'F7.[mp3|ogg]',
            'G1': 'G1.[mp3|ogg]',
            'G3': 'G3.[mp3|ogg]',
            'G5': 'G5.[mp3|ogg]',
            'A2': 'A2.[mp3|ogg]',
            'A4': 'A4.[mp3|ogg]',
            'A6': 'A6.[mp3|ogg]',
            'B1': 'B1.[mp3|ogg]',
            'B3': 'B3.[mp3|ogg]',
            'B5': 'B5.[mp3|ogg]',
            'B6': 'B6.[mp3|ogg]',
            'C3': 'C3.[mp3|ogg]'
        },
        'organ': {
            'C3': 'C3.[mp3|ogg]',
            'C4': 'C4.[mp3|ogg]',
            'C5': 'C5.[mp3|ogg]',
            'C6': 'C6.[mp3|ogg]',
            'D#1': 'Ds1.[mp3|ogg]',
            'D#2': 'Ds2.[mp3|ogg]',
            'D#3': 'Ds3.[mp3|ogg]',
            'D#4': 'Ds4.[mp3|ogg]',
            'D#5': 'Ds5.[mp3|ogg]',
            'F#1': 'Fs1.[mp3|ogg]',
            'F#2': 'Fs2.[mp3|ogg]',
            'F#3': 'Fs3.[mp3|ogg]',
            'F#4': 'Fs4.[mp3|ogg]',
            'F#5': 'Fs5.[mp3|ogg]',
            'A1': 'A1.[mp3|ogg]',
            'A2': 'A2.[mp3|ogg]',
            'A3': 'A3.[mp3|ogg]',
            'A4': 'A4.[mp3|ogg]',
            'A5': 'A5.[mp3|ogg]',
            'C1': 'C1.[mp3|ogg]',
            'C2': 'C2.[mp3|ogg]'
        },
        'piano': {
            'A0': 'A0.[mp3|ogg]',
            'A1': 'A1.[mp3|ogg]',
            'A2': 'A2.[mp3|ogg]',
            'A3': 'A3.[mp3|ogg]',
            'A4': 'A4.[mp3|ogg]',
            'A5': 'A5.[mp3|ogg]',
            'A6': 'A6.[mp3|ogg]',
            'A#0': 'As0.[mp3|ogg]',
            'A#1': 'As1.[mp3|ogg]',
            'A#2': 'As2.[mp3|ogg]',
            'A#3': 'As3.[mp3|ogg]',
            'A#4': 'As4.[mp3|ogg]',
            'A#5': 'As5.[mp3|ogg]',
            'A#6': 'As6.[mp3|ogg]',
            'B0': 'B0.[mp3|ogg]',
            'B1': 'B1.[mp3|ogg]',
            'B2': 'B2.[mp3|ogg]',
            'B3': 'B3.[mp3|ogg]',
            'B4': 'B4.[mp3|ogg]',
            'B5': 'B5.[mp3|ogg]',
            'B6': 'B6.[mp3|ogg]',
            'C0': 'C0.[mp3|ogg]',
            'C1': 'C1.[mp3|ogg]',
            'C2': 'C2.[mp3|ogg]',
            'C3': 'C3.[mp3|ogg]',
            'C4': 'C4.[mp3|ogg]',
            'C5': 'C5.[mp3|ogg]',
            'C6': 'C6.[mp3|ogg]',
            'C7': 'C7.[mp3|ogg]',
            'C#0': 'Cs0.[mp3|ogg]',
            'C#1': 'Cs1.[mp3|ogg]',
            'C#2': 'Cs2.[mp3|ogg]',
            'C#3': 'Cs3.[mp3|ogg]',
            'C#4': 'Cs4.[mp3|ogg]',
            'C#5': 'Cs5.[mp3|ogg]',
            'C#6': 'Cs6.[mp3|ogg]',
            'D0': 'D0.[mp3|ogg]',
            'D1': 'D1.[mp3|ogg]',
            'D2': 'D2.[mp3|ogg]',
            'D3': 'D3.[mp3|ogg]',
            'D4': 'D4.[mp3|ogg]',
            'D5': 'D5.[mp3|ogg]',
            'D6': 'D6.[mp3|ogg]',
            'D#0': 'Ds0.[mp3|ogg]',
            'D#1': 'Ds1.[mp3|ogg]',
            'D#2': 'Ds2.[mp3|ogg]',
            'D#3': 'Ds3.[mp3|ogg]',
            'D#4': 'Ds4.[mp3|ogg]',
            'D#5': 'Ds5.[mp3|ogg]',
            'D#6': 'Ds6.[mp3|ogg]',
            'E0': 'E0.[mp3|ogg]',
            'E1': 'E1.[mp3|ogg]',
            'E2': 'E2.[mp3|ogg]',
            'E3': 'E3.[mp3|ogg]',
            'E4': 'E4.[mp3|ogg]',
            'E5': 'E5.[mp3|ogg]',
            'E6': 'E6.[mp3|ogg]',
            'F0': 'F0.[mp3|ogg]',
            'F1': 'F1.[mp3|ogg]',
            'F2': 'F2.[mp3|ogg]',
            'F3': 'F3.[mp3|ogg]',
            'F4': 'F4.[mp3|ogg]',
            'F5': 'F5.[mp3|ogg]',
            'F6': 'F6.[mp3|ogg]',
            'F#0': 'Fs0.[mp3|ogg]',
            'F#1': 'Fs1.[mp3|ogg]',
            'F#2': 'Fs2.[mp3|ogg]',
            'F#3': 'Fs3.[mp3|ogg]',
            'F#4': 'Fs4.[mp3|ogg]',
            'F#5': 'Fs5.[mp3|ogg]',
            'F#6': 'Fs6.[mp3|ogg]',
            'G0': 'G0.[mp3|ogg]',
            'G1': 'G1.[mp3|ogg]',
            'G2': 'G2.[mp3|ogg]',
            'G3': 'G3.[mp3|ogg]',
            'G4': 'G4.[mp3|ogg]',
            'G5': 'G5.[mp3|ogg]',
            'G6': 'G6.[mp3|ogg]',
            'G#0': 'Gs0.[mp3|ogg]',
            'G#1': 'Gs1.[mp3|ogg]',
            'G#2': 'Gs2.[mp3|ogg]',
            'G#3': 'Gs3.[mp3|ogg]',
            'G#4': 'Gs4.[mp3|ogg]',
            'G#5': 'Gs5.[mp3|ogg]',
            'G#6': 'Gs6.[mp3|ogg]'
        },

    }
    var instruments = SampleLibrary.load({
      instruments: ["piano","harp","organ"]
    });
    
    var LOADED = false;
    
    Tone.loaded().then(() => {
      instruments.pianoVolume = new Tone.Volume(-20).toDestination();
      instruments.harpVolume = new Tone.Volume(-20).toDestination();
      instruments.organVolume = new Tone.Volume(-20).toDestination();
    	instruments.piano.connect(instruments.pianoVolume);
    	instruments.harp.connect(instruments.harpVolume);
    	instruments.organ.connect(instruments.organVolume);
      
      // Make the buttons work!
      LOADED = true;
      d3.select("button#lineplay").text("Play");
      d3.select("button#barplay").text("Play");
    });
    
    </script>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>
    
    function sanitize(s) {
      return s.replace("<br>", "\\n")
              .replace(/&/g, "&amp;")
              .replace(/</g, "&lt;")
              .replace(/>/g, "&gt;")
              .replace(/"/g, "&quot;")
              .replace(/'/g, "&#039;");
            }
      document.getElementById("display1").innerHTML = sanitize( document.getElementById("notes1").innerText);
      document.getElementById("display2").innerHTML = sanitize( document.getElementById("notes2").innerText);
      hljs.highlightAll();
    </script>    
    
  </div>
</body>
</html>
