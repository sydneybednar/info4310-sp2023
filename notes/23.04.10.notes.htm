<html>
<head>
  <title>INFO 4310 - April-10</title>
  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <style>
  
    svg text {
      font-family: 'Lato', Helvetica, sans-serif;
      font-size: 20px;
      font-weight: bold;
      text-anchor: middle;
      alignment-baseline: middle;
    }
    
    text.A {
      fill: #263075;
    }
    text.B {
      fill: #336e9e;
    }
  
  </style>
  
</head>
<body>
  <div class="container larger">
    <h3>Notes for April 10</h3>
    <p>
      Today we will attempt to construct some node-link diagrams of textual relationships inspired by <a href="https://ieeexplore.ieee.org/abstract/document/5290726?casa_token=L18AHuS04IMAAAAA:NBCWE3GMBwZipMTKnGVM7vM5utWUbP_ou9tE3YoxLl-rppTHT53WtU0YMUk4u6xPjLbEm8bCjQ">this paper</a> and using <a href="https://www.gutenberg.org/ebooks/1342">Pride and Prejudice</a> by Jane Austen as source text. While there are some clever techniques for identifying textual relationships using word embeddings, we are keeping it very simple. Simple dataset generation scripts are included in the repository.
    </p>
    <p>
      As we work through a force-directed model, we quickly run into cases where it does not have necessary features. One of the best strategies for customizing your visualizations is to use the original d3 source as a model. Course materials today make use of the <a href="https://github.com/d3/d3-force/tree/main/src">d3-force</a> source as well as an example model from <a href="https://lvngd.com/blog/rectangular-collision-detection-d3-force-layouts/">Christina Levengood</a>.
    </p>
    <h5>HTML for today:</h5>
    
    <h5>A (is) at\in (the) B</h5>
    <svg id="plot-at" width="800" height="800" style="margin-bottom:20px; border: 1px solid black;" >
      <defs>
        <marker id="arrow" viewBox="0,0,10,10" refX="9" refY="5" markerWidth="10" markerHeight="10" orient="auto-start-reverse">
          <path d="M0,0L0,10L10,5" fill="grey"></path>
        </marker>
      </defs>
    </svg>
    
    <h5>A's B</h5>
    <svg id="plot-gen" width="800" height="800" style="margin-bottom:20px; border: 1px solid black;" >
      <defs>
        <marker id="arrow" viewBox="0,0,10,10" refX="5" refY="5" markerWidth="10" markerHeight="10" orient="auto-start-reverse">
          <path d="M0,0L0,10L10,5" fill="grey"></path>
        </marker>
      </defs>
    </svg>
    
  
    <h5>Code for today:</h5>
    <pre>
      <code id="display2" class="hljs javascript">
      </code>
    </pre>
    <pre>
      <code id="display1" class="hljs javascript">
      </code>
    </pre>
    
    <script id="notes1">
    
    // ----------- Helper functions ---------------
    
    
    // ---- Get bounding box for text element
    // Make a hidden SVG to use for measuring text element sizes
    var virtualText = d3.select("body").append("svg").attr("width",0).attr("height",0)
                        .append("text");
                        
    // Given a label, give a bounding box with padding for that text in the SVG
    var getTextBBox = (label, fontSize, xPad, yPad) => {
      virtualText.style("font-size", `${fontSize}px`).text(label);
      let width  = virtualText.node().getComputedTextLength() + 2*xPad;
      let height = fontSize + 2*yPad;
      // make sure we get an even number so our width/2 does not have decimals
      width = Math.ceil(width) + Math.ceil(width)%2;
      height = Math.ceil(height) + Math.ceil(height)%2;
      return [width, height];
    };
    
    
    // ---- Find intersection points for line connecting centers of one bounding box to another
    // We use this to make nice lines that go from one box and point to another without overlap
    // Source and Target should be node objects that have x, y, and bbox properties
    // This will return an array with two [x,y] points in it for the intersections
    var getIntersections = (source, target) => {
      
      // Create bounding boxes
      let sourceBBox = {left: source.x - source.bbox[0]/2.0, right: source.x + source.bbox[0]/2.0, top: source.y - source.bbox[1]/2.0, bottom: source.y + source.bbox[1]/2.0}
      let targetBBox = {left: target.x - target.bbox[0]/2.0, right: target.x + target.bbox[0]/2.0, top: target.y - target.bbox[1]/2.0, bottom: target.y + target.bbox[1]/2.0}
      
      // Check for completely overlapping rectangles
      if (source.x === target.x && source.y === target.y) {
        return [[source.x, source.y], [target.x, target.y]];
      }
      // Check for intersecting rectangles. If so, just return a plain line from center to center
      else if (sourceBBox.left < targetBBox.right && sourceBBox.right > targetBBox.left &&
          sourceBBox.top > targetBBox.bottom && sourceBBox.bottom < targetBBox.top ) {
        return [[source.x, source.y], [target.x, target.y]];
      }
      
      // Otherwise, find the intersection points using a short version of Liang-Barsky
      //  https://en.wikipedia.org/wiki/Liang%E2%80%93Barsky_algorithm
      //   (shortened by assuming that only outside-inside intersection exists)
      else {
        // Make an intersection function just to save space, shouldn't be too inefficient
        let intersect = (source, target, bbox) => {
          let lineSource = [source.x, source.y];
          let lineTarget = [target.x, target.y];
          let lineDelta = [target.x - source.x, target.y - source.y];
          
          let p = [-lineDelta[0], lineDelta[0], 
                   -lineDelta[1], lineDelta[1]];
          let q = [lineSource[0] - bbox.left, bbox.right - lineSource[0], 
                   lineSource[1] - bbox.top, bbox.bottom - lineSource[1]];
          let t1 = Number.NEGATIVE_INFINITY;
          let t2 = Number.POSITIVE_INFINITY;
          
          for (let i=0; i<4; i++) {
            let t = q[i] / p[i];
            if (p[i] < 0 && t1 < t) { t1 = t }
            else if (p[i] > 0 && t2 > t) { t2 = t }
          }
          
          return [lineSource[0] + t1*lineDelta[0], lineSource[1] + t1*lineDelta[1]];
        }
        // Cast lines in different directions to find intersection points
        return [intersect(target, source, sourceBBox), intersect(source, target, targetBBox)];
      }
    }
    
    
    // ------------ We'll use this section later to make a better layout
    // Using the forceCollide as a base, we can adapt it to collide with rectangular hulls
    // 
    
    // built-in d3 functions
    function constant(_) {   // give this a value, it returns a function that returns a value -- i.e.  value ====> () => value
        return function () { return _ }
    }
    function jiggle(random) { // used to make forces work when stuff overlaps by VERY slightly moving things
      return (random() - 0.5) * 1e-6;
    }

    // --- Here is our new d3 force ---
    // At it's core, the force is going to return a function that the d3.forceSimulation is going to run over and over again
    // When we run .force('name', forceCollideRect()), the force function is given nodes and random as properties
    // So it has access to the node data right from the initialization
    // Then, we set up some additional functions tacked onto the force function for configuration
    // These will let us set iterations, strength, etc.
    // Before you go through force(), check out the extras
    function forceCollideRect() {
      
      // These vars will either be assigned by the user or in the case of nodes, random will be automatically assigned by d3
      var nodes,
          random,
          size = constant( [10,10] ),
          sizes,
          strength = 1,
          iterations = 1;

      // Force function that is called for every .tick() of the simulation
      // Here, we expect our force function to help to push overlapping rectangles off of each other (creating a collision effect)
      function force() {
        
        // Set things up to check the nodes for overlap
        // xi, yi, si are going to track the current node we are examining for overlaps
        var i, n = nodes.length;
        var tree, // quadtree
            node, // node under consideration during loop
            xi,   // x center for node
            yi,   // y center for node
            si;   // size for node
        
        // Iterate collision solver
        // This is how iterations makes a collision force more "accurate" -- just by running it more times per .tick()
        for (var k = 0; k < iterations; ++k) {
          
          // Put nodes into quadtree, then iterate through them
          // We use a quadtree here because it is going to dramatically speed up the collision checking/
          // The intuition is that it's going to help us ignore boxes that are far away and can't possible overlap our current node
          // Using tree.visit, we traverse the quadtree for each node, checking whether it is on top of another
          tree = d3.quadtree(nodes, d => d.x + d.vx, d => d.y + d.vy);
          for (var i = 0; i < n; ++i) {
            node = nodes[i];
            xi = node.x + node.vx;
            yi = node.y + node.vy;
            si = sizes[i];
            tree.visit(apply);
          }
        }
        
        // Apply is called by tree.visit and begins traversing the quadtree
        // If apply returns false, then the tree keeps traversing this branch
        // If apply returns true, then we move on to another branch
        // If quad.data is an Object and not null, then we know we are at the bottom of a branch
        //  where the leaf nodes live (and not the rectangle data structures that make up the rest)
        // Otherwise, we are in a rectangle and we use that to check whether overlaps are possible
        // This allows us to return true/false based on whether anything in the branch could collide
        function apply(quad, x0, y0, x1, y1) {
            var data = quad.data;
            // If data exists, then we are at a leaf node and not a quad rectangle
            if(data){
              if (data.index > node.index) { // If the index is greater, we've already compared them
                                             //  in an earlier loop which already called apply
                let xd = data.x + data.vx;
                let yd = data.y + data.vy;
                let sd = sizes[data.index];                             
                let xHalfDist = (si[0] + sd[0]) / 2.0;
                let yHalfDist = (si[1] + sd[1]) / 2.0;
                let dX = xi - xd;
                let dY = yi - yd;
                let distX = Math.abs(dX);
                let distY = Math.abs(dY);
                
                // Check for collision by comparing half distances
                //  Intuition: If centers are less than the size of each box divided by 2, then they
                //   must be overlapping on that dimension. Both must overlap to have a true collision.
                if (distX <= xHalfDist && distY <= yHalfDist) {
                  
                  if (distX === 0) { distX = jiggle(random); }
                  if (distY === 0) { distY = jiggle(random); }
                
                  // Now resolve the collision down to a vector to nudge the boxes away
                  let dist = Math.sqrt(dX*dX + dY*dY);
                  let collisionVec = [dX / dist, dY / dist];
                  
                  let impulse = strength;  // You could take into account size of boxes to make
                                           //  a more accurate impulse based on masses
                  node.vx += (impulse * collisionVec[0]);
                  node.vy += (impulse * collisionVec[1]);
                  data.vx -= (impulse * collisionVec[0]);
                  data.vy -= (impulse * collisionVec[1]);
                }
              }
              return; // finished traversing this branch
            }
          // If data is not defined, then we need to return true or false to continue traversal
          // True stops the traversal on this branch, False continues it
          // The intuition here is that we can examine x0, y0, x1, y1 to see whether a collision
          //  is even possible. If x0 is past the right side of the box, then it can't possible touch.
          //  Since child nodes are guaranteed to be inside x0,y0,x1,y1, we can skip traversing this
          //  branch and move on to another one instead. This is the efficiency gain from quadtrees.
          return x0 > xi + si[0]/2.0 || x1 < xi - si[0]/2.0 || y0 > yi + si[1]/2.0 || y1 < yi - si[1]/2.0;
          //      Right || Left || Bottom || Top
        }
      }
      
      // All d3 force functions tend to have an initialize function that computes the radius/size/whatever ahead
      //  of time to save computation. Notice how force.size calls this to update if the user changes it
      // In the basic d3.forceCollide, it's called by force.radius
      function initialize() {
        
        // NOTE: We make use of configurable size constant / function
        // So loop through the nodes and get all of the sizes by applying the size function given by the user
        if (!nodes) return;
        var i, n = nodes.length, node;
        sizes = new Array();
        for (i = 0; i < n; ++i) {
          node = nodes[i]
          sizes[node.index] = size(node, i, nodes);
        }
        
      }

      // Called by the simulation to provide the force with nodes
      // This is a bit of dumb d3 architecting - it's NOT the same as initialize() above
      // Instead this is a static function as a property that d3 expects to be there to give it the nodes
      // This is what is called right after you run .force("name", forceCollideRect()) to give the force the nodes
      force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
      };

      // Configure iterations
      force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
      };

      // Configure strength
      force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
      };

      // Configure how we tell the size of each node in our array (how wide and tall it is for collisions)
      // - Expect a function that takes in d and returns [width, height] of the node
      force.size = function(_) {
        return arguments.length ? (size = typeof _ === "function" ? _ : constant(_), initialize(), force) : size;
        
            
        // LONGHAND PSEUDOCODE:
        // if (function_arguments.length > 0) {
        //   if (size is a function) {  
        //     force.size = size function 
      //     }
        //   else (size is a fixed value) {
        //     force.size = constant(size) // constant() is a built-in function that converts
        // } }                             //  converts fixed value x into () => {return x}
        // else {  return size;   }        // d3 tends to do this so initialize() always 
        //                                 //  treats force.size like a function
        
      };

      return force;
    }
    
    
    
    
    </script>
    
    
    <script id="notes2">
    
    
    async function populateChart( dataset, canvas ) {
      
      let layer = canvas.append("g");
      let width = canvas.attr("width");
      let height = canvas.attr("height");
      
      // Add pan/zoom
      canvas.append("rect").attr("x",0).attr("y",0)
                           .attr("width",width).attr("height",height)
                           .attr("fill","none")
                           .style("pointer-events","all")
                           .call(d3.zoom().on("zoom", 
                               function({transform}) { layer.attr("transform",transform) })
                              );
      
      let nodes = dataset.nodes;
      let edges = dataset.edges;
      
      // get font size scale, just in case
      let fontScale = d3.scaleLinear().domain(d3.extent(nodes, d => d.count)).range([16,28]);
      
      // modify the dataset with dimensions for each node
      nodes.forEach( d => {
        d.bbox = getTextBBox(d.name, Math.floor(fontScale(d.count)), 5, 5);
        d.hull = getTextBBox(d.name, Math.floor(fontScale(d.count)), 20, 20);
        
        d.x = Math.random() * width;
        d.y = Math.random() * height;
      });
      
      
      let render = () => {

        let lines = layer.selectAll("line.link").data(edges)
         .join(
           enter => enter.append("line")
                         .attr("class","link")
                         .attr("stroke","#333") 
                         .style("marker-end", "url(#arrow)")
         )
         // .attr("x1", d => d.source.x).attr("x2", d => d.target.x)
         // .attr("y1", d => d.source.y).attr("y2", d => d.target.y);
         
         // Instead, compute the intersection of the line segment with the box outline
         // Use those so the line starts and ends on the box and not at the center
         lines.each( function(d) {
           let line = d3.select(this);
           let intersect = getIntersections(d.source, d.target);
           line.attr("x1", d => intersect[0][0]).attr("x2", d => intersect[1][0])
               .attr("y1", d => intersect[0][1]).attr("y2", d => intersect[1][1]);
         } );
        
         // Circles were hard to interpret
         // let circles = layer.selectAll("circle.node").data(nodes)
         //        .join(
         //           enter => enter.append("circle")
         //                         .attr("class","node")
         //                         .attr("stroke", "#333")
         //                         .attr("r", 8)
         //                         .attr("cx", 0)
         //                         .attr("cy", 0)
         //                         .attr("fill", "steelblue")       )
         //        .attr("transform", d => `translate(${d.x},${d.y})`);
        
        // Make some text labels instead
        let labels = layer.selectAll("g.node").data(nodes)
            .join(
               enter => { gTags = enter.append("g")
                                       .attr("class","node");
                          
                          // Background rectangle             
                          gTags.append("rect")
                               .attr("x", d => -d.bbox[0]/2.0)
                               .attr("y", d => -d.bbox[1]/2.0)
                               .attr("width", d => d.bbox[0] )
                               .attr("height", d => d.bbox[1] )
                               .attr("fill", "white")
                               .attr("stroke", "black")
                               .attr("opacity", 0.5);
                                
                          // Text label   
                          gTags.append("text")
                               .attr("class", d => d.type )
                               .attr("x",0)
                               .attr("y",0)
                               .style("font-size", d => `${Math.floor(fontScale(d.count))}px`)
                               .text( d => d.name );
                          
                          // Don't forget to return the added items   
                          return gTags;
                        }
                             
             )
            .attr("transform", d => `translate(${d.x},${d.y})`);
      }   
      
      
      // Build a simulation for the graph
      var sim = d3.forceSimulation()
                  .alphaDecay( 1 - Math.pow(0.001, 1 / 400) )
                  .nodes(nodes)
                  .force("links", d3.forceLink()   
                                    .links(edges) 
                                    //.distance(50) // distance can also help, but it's not perfect
                                    .id( d => d['id'] ) )
                  .force("repulse", d3.forceManyBody().strength(-1) ) 
                  .force("center", d3.forceCenter(width/2.0, height/2.0))
                  // .force("collide", d3.forceCollide().radius( d => d.hull[0]/2.0 )) // This works okay... 
                  .force("collide", forceCollideRect().size( d => d.hull )
                                                      .iterations(2)
                                                      .strength(5) )
                  .on("tick", render)
                  .stop();            //ADDED AFTER CLASS
    
      // ADDED AFTER CLASS - automatically settle the chart into final layout
      while (sim.alpha() > 0.001) { 
        sim.tick(); 
      }
      render();
                  
    
                 
      
    }
    
    
    
    
    const requestData = async () => {

      const atRelationships = await d3.json("../datasets/pnp_at_relationships.json");
      console.log(atRelationships);
      populateChart( atRelationships, d3.select("#plot-at") );
      
      const genRelationships = await d3.json("../datasets/pnp_genitive_relationships.json");
      console.log(genRelationships);
      populateChart( genRelationships, d3.select("#plot-gen") );
    
    }
    requestData();
    
    </script>
    
    
    
    
    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>
    
    function sanitize(s) {
      return s.replace("<br>", "\\n")
              .replace(/&/g, "&amp;")
              .replace(/</g, "&lt;")
              .replace(/>/g, "&gt;")
              .replace(/"/g, "&quot;")
              .replace(/'/g, "&#039;");
            }
      document.getElementById("display1").innerHTML = sanitize( document.getElementById("notes1").innerText);
      document.getElementById("display2").innerHTML = sanitize( document.getElementById("notes2").innerText);
      hljs.highlightAll();
    </script>    
    
  </div>
</body>
</html>
