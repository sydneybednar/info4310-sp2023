<html>
<head>
  <title>INFO 4310 - Feb-06</title>
  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <style>
  
      .gridlines line {
        stroke: #bbb;
      }

      .gridlines .domain {
        stroke: none;
      }
          
      #scatterplot {
        float:left;
      }
      
      #panel {
        height:400px; 
        width:400px; 
        float:left; 
        padding: 20 30 20 20;
      }
      
      #panel h5 {
        margin:0;
        padding:0;
      }
      
      #lasso {
        stroke: black;
        fill: steelblue;
        fill-opacity: 0.1;
      }
  
  </style>
  
</head>
<body>
  <div class="container larger">
    <h3>Notes for February 6</h3>
    <p>
      Today we're going to go through some different patterns for selecting and manipulating views in d3.
    </p>
    <p>
      We'll make use of JS destructuring in our function calls today, since it's so handy. See the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">reference doc</a>.
    </p>
    
    
    <h5>HTML for today:</h5>
    
    <div style="width: 1100px; height: 400px;">
      <svg id="scatterplot" height="400" width="600" style="float:left;" >
        
      </svg>
      
      <div id="panel">
      </div>
    </div>
      
    
    <h5>Code for today:</h5>
    <pre>
      <code id="display1" class="hljs javascript">
      </code>
    </pre>
    <pre>
      <code id="display2" class="hljs javascript">
      </code>
    </pre>
    
    
    
    
    
    <script id="notes1">
  
    const scatter = d3.select("svg#scatterplot");
    const width = scatter.attr("width");
    const height = scatter.attr("height");
    const margin = {top: 15, right: 15, bottom: 40, left: 50};
    const chartWidth = width - margin.left - margin.right;
    const chartHeight = height - margin.top - margin.bottom;

    let annotations = scatter.append("g").attr("id","annotations");
    let chartArea = scatter.append("g").attr("id","points")
                    .attr("transform","translate("+margin.left+","+margin.top+")");    

    const loadScatter = async function() {
      
      let data = await d3.csv("../datasets/blockbusters.csv", d3.autoType )
      data.forEach( d => {
        d['worldwide_gross'] = Number( d['worldwide_gross'].replace(/,/g, "").replace(/\$/g,"") );
      });

      const yearExtent = d3.extent(data, d => d['year']);
      const yearScale = d3.scaleLinear().domain(yearExtent).range([0, chartWidth]);
      const grossExtent = d3.extent(data, d => d['worldwide_gross']);
      const grossScale = d3.scaleLog().domain(grossExtent).range([chartHeight, 0]);
      const imdbExtent = d3.extent(data, d => d['imdb_rating']);
      const imdbScale = d3.scaleLinear().domain(imdbExtent).range([3,8]);
      const genreScale = d3.scaleOrdinal(d3.schemeCategory10);
      let leftAxis = d3.axisLeft(grossScale)
                       .tickFormat(d3.format("$.0s"));  // shorter scientific notation with a dollar sign in front
      let leftGridlines = d3.axisLeft(grossScale)
                            .tickSize(-chartWidth-10)
                            .tickFormat("")
      let bottomAxis = d3.axisBottom(yearScale)
                         .tickFormat(d3.format("~f"));  // exact value without commas
      let bottomGridlines = d3.axisBottom(yearScale)
                              .tickSize(-chartHeight-10)
                              .tickFormat("")
      annotations.append("g")
        .attr("class", "y axis")
        .attr("transform",`translate(${margin.left-10},${margin.top})`)
        .call(leftAxis)
      annotations.append("g")
        .attr("class", "y gridlines")
        .attr("transform",`translate(${margin.left-10},${margin.top})`)
        .call(leftGridlines);
      annotations.append("g")
        .attr("class", "x axis")
        .attr("transform",`translate(${margin.left},${chartHeight+margin.top+10})`)
        .call(bottomAxis);
      annotations.append("g")
        .attr("class", "x gridlines")
        .attr("transform",`translate(${margin.left},${chartHeight+margin.top+10})`)
        .call(bottomGridlines);
        
      
      let circles = chartArea.selectAll("circle.point").data(data)
                              .join(enter => enter.append("circle")
                                                  .attr("class","point")
                                                  .attr("opacity", 0.8)
                                                )
                              .attr("cx", d => yearScale(d['year']))
                              .attr("cy", d => grossScale(d['worldwide_gross']+1))
                              .attr("r", d => imdbScale(d['imdb_rating']))
                              .attr("fill", d => genreScale(d['Main_Genre']) ) 
                              .attr("label", d => d["title"])
                              .attr("genre", d => d["Main_Genre"]);
                
        
        // event is new as of d3 v6
        circles.on("mouseover", function(event, d) {
          
          d3.select(this)
            .transition().duration(200)
            .attr("stroke","black")
            .attr("stroke-width", 4)
            .attr("fill", lighten( genreScale(d['Main_Genre']) )) ;
        
          updatePanel(d);
        
        });
        
        circles.on("mouseout", function(event, d) {
        
          d3.select(this)
            .transition().duration(200)
            .attr("stroke","")
            .attr("stroke-width", 1)
            .attr("fill", genreScale(d['Main_Genre']) );
        
          updatePanel( {} );
        
        });
          
          
        // Make a panel to provide more info to the user, reinforce what mouseover is doing  
        let panelHeader = d3.select("#panel").append("h5");
        let table = d3.select("#panel").append("table");
        
        function updatePanel(row) {
          
          // // Original version
          // let title = row.title;
          // panelHeader.text(title);
          // let kvPairs = Object.entries(row);
          
          // Let's get rid of the "title" key so our table is cleaner
          let rowCopy = Object.assign({},row); // does a "shallow copy" of row so we can delete title
          let title = rowCopy.title;
          delete rowCopy.title;
          panelHeader.text(title);
          
          let kvPairs = Object.entries(rowCopy);
          console.log(kvPairs);
          
          let rows = table.selectAll("tr").data(kvPairs)
                          .join( enter => enter.append("tr"),
                                 update => update.selectAll("td").remove(), 
                                 exit => exit.remove() );
          
          rows.append("td").append("strong").text( d => d[0] );
          rows.append("td").text( d => d[1] );
          
          // NOTE: this will work even when we give it a {} in mouseout
          //  That's because the title stuff doesn't throw exceptions and kvPairs will just be []
          
        }
        
        
        
        
        // Creating an interactive surface for better events
        //  We add it to the annotations so it appears *underneath* the points.
        // * Is this a good choice? *
        let surface = annotations.append("g").raise()
                             .style("pointer-events","all") // What allows it to capture mouse evt
                             .attr("transform","translate("+margin.left+","+margin.top+")") 
        // The "pixels" for the mouse events to hit -- don't need to be filled                                       
        surface.append("rect")
                  .attr("x1",0)
                  .attr("y1",0)
                  .attr("width",chartWidth)
                  .attr("height",chartHeight)
                  .attr("fill","none");
        
        
        // Add a 2d brush to the chart area - allows for rectangular selection
        // Use *either* brush or lasso. They aren't friends
        
        // surface.call( d3.brush().on("start", brushStart).on("brush", brushed) );
        // 
        // function brushStart(event) {
        //   circles.attr("fill", d => genreScale(d['Main_Genre']) );
        // }
        // // Notice the function call here -- we are using *destructuring*
        // //  If you know the format of your input, you can directly extract variables from it
        // //  So instead of event.selection[0][0] we can now just say x0
        // function brushed( { selection: [[x0, y0],[x1, y1]] } ) {
        // 
        //     let numPoints = 0;
        //     circles.attr("fill", d => {
        // 
        //       let x = yearScale(d['year'])
        //       let y = grossScale(d['worldwide_gross']+1)
        // 
        //       if ((x > x0 && x < x1) && (y > y0 && y < y1)) {
        //         numPoints++;
        //         return "red";
        //       }
        //       else {
        //         return genreScale(d['Main_Genre']);
        //       }
        // 
        //     });
        //     // because circles.attr "loops" through the points, our numPoints will count up the red circles
        //     updatePanelHeader(numPoints)
        // 
        // }
        
        // Create a simple lasso tool for selection
        // Use *either* brush or lasso. They aren't friends
        
        //  We'll keep a running array of coordinates [[x,y],[x,y],[x,y]...]
        //  We will use the same <path> element to draw the current lasso using a line gen
        var pathCoord = [];
        var path = surface.append("path").attr("id","lasso");
        var lineGen = d3.line().x( d => d[0] ).y( d => d[1] );
        
        // To make it simple to track "click and move mouse" behaviors, we use a d3.drag
        // It's going to try to "drag" the invisible <rect> we made -- we just don't move it
        surface.call( d3.drag().on("start", lassoStart).on("drag", lassoed).on("end", lassoEnd) );
        
        function lassoStart( event ) {
            // Reset the path
            pathCoord = [];
            path.datum(pathCoord).attr("d",lineGen);
            updateCircleSelection();
        }
        // Use path destructuring on the event
        function lassoed( {x, y} ) {
            // We've moved, so add a new coordinate
            // We need to compensate for the transform-translate, so we subtract the margins
            pathCoord.push( [x-margin.left, y-margin.top] );
            
            path.datum(pathCoord).attr("d",lineGen);
            updateCircleSelection();
        }
        function lassoEnd( event ) {
            // Reset the path
            pathCoord = [];
            path.datum(pathCoord).attr("d",lineGen);
            updateCircleSelection();
        }
        
        
        // This will color the circles as red or normal based on containment in lasso
        function updateCircleSelection() {
          
          let numPoints = 0;
          
          // Base case - empty path
          if (pathCoord.length < 1) {
            circles.attr("fill", d => genreScale(d['Main_Genre']) );
          }
          // Path has coords in it
          else {
            circles.attr("fill", d => {
              // Use the scales to figure out where the point is
              // d3 needs it to be in [x,y] format
              let point = [yearScale(d['year']), grossScale(d['worldwide_gross']+1)];
              
              // d3.polygonContains takes in a polygon as [[x,y],[x,y],[x,y]...]
              // (Ideally those points go in a counter-clockwise direction, but it should work regardless)
              // It will test whether a point [x,y] is inside of that polygon
              if (d3.polygonContains(pathCoord, point)) {
                numPoints++;
                return "red";
              }
              else {
                return genreScale(d['Main_Genre']);
              }
            } );  
          }
          // because circles.attr "loops" through the points, our numPoints will count up the red circles
          updatePanelHeader(numPoints)
        }
        
        
        // Added in this function just to show some status
        function updatePanelHeader( numPoints ) {
            if (numPoints > 0) {
              panelHeader.text("Selected: "+numPoints+" points");
            }
            else {
              panelHeader.text("");
            }
        }
        
        // Left to the reader - how to add logic to the mouseovers so they don't trigger if lasso-ing
        
        

    }
    loadScatter();
    

    // HELPER FUNCTION
    //  lighten a color a little bit using d3 color functions
    function lighten(color) {
        
        let hclColor = d3.hcl(color);
        let luma = Math.min(130, hclColor.l + 30);
        return d3.rgb( d3.hcl( hclColor.h, hclColor.c, luma ) );
      
    }
  
    
    </script>
    
    
    
    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>
    
    function sanitize(s) {
      return s.replace("<br>", "\\n")
              .replace(/&/g, "&amp;")
              .replace(/</g, "&lt;")
              .replace(/>/g, "&gt;")
              .replace(/"/g, "&quot;")
              .replace(/'/g, "&#039;");
            }
      document.getElementById("display1").innerHTML = sanitize( document.getElementById("notes1").innerText);
      hljs.highlightAll();
    </script>    
    
  </div>
</body>
</html>
